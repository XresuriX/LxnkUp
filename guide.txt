python -m venv venv
python -m black {source_file_or_directory}
source venv/Scripts/activate
export DJANGO_SETTINGS_MODULE=src.settings.local
pytest -vv -s
python manage.py runserver --settings=src.settings.
python manage.py tailwind start --settings=src.settings.local
python manage.py makemigrations --settings=src.settings.test
python manage.py migrate --settings=src.settings.test
celery beat -l info
celery worker -l info
rabbitmqctl status
pip install -r requirements/local.txt
pre-commit install
git remote -v
git branch -M main  # Rename your current branch to 'main'
git remote add origin
git push -u origin main
git commit -m "Initial commit"
git add lxnkup/.envs/.production/.postgres
git commit --amend
git push --all --force
git push --tags --force
pip3 freeze > requirements.txt
pip install -r requirements/local.txt
export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
export CELERY_BROKER_URL="${REDIS_URL}"
export CELERY_BROKER_URL=redis://localhost:6379/0

docker compose -f docker-compose.local.yml build
docker compose -f docker-compose.local.yml up -d
export COMPOSE_FILE=docker-compose.local.yml
docker compose up -d
docker compose -f docker-compose.docs.yml up
docker compose -f docker-compose.local.yml run --rm django python manage.py makemigrations
docker compose -f docker-compose.local.yml run --rm django python manage.py migrate
docker compose -f docker-compose.local.yml run --rm django coverage run -m pytest --create-db
docker compose -f docker-compose.local.yml run --rm django coverage report

KURENTO_WS_URL = "ws://kurento:8888/kurento"

nginx:
    image: nginx:latest
    ports:
      - '80:80'
    volumes:
      - ./nginx/default.config:/etc/nginx/default.conf:ro
      - next_build:/frontend/build:ro
    depends_on:
      - django
      - node
